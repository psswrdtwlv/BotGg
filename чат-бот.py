import os
import json
import logging
import asyncio
import datetime
import gspread
import base64
import pytz
import redis
from google.oauth2.service_account import Credentials
from telegram import Bot, error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SHEET_ID = os.getenv("SHEET_ID")
SHEET_UCHET_GID = int(os.getenv("SHEET_UCHET_GID", 0))  # –ì–ò–î –ª–∏—Å—Ç–∞ "–£—á—ë—Ç"
SHEET_AUP_GID = int(os.getenv("SHEET_AUP_GID", 1393986014))  # –ì–ò–î –ª–∏—Å—Ç–∞ "–£—á—ë—Ç –ê–£–ü"
CHAT_ID = os.getenv("CHAT_ID")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
try:
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    redis_client.set("test_key", "test_value")
    test_value = redis_client.get("test_key")
    if test_value == "test_value":
        logging.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        logging.error("‚ùå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–ø–æ–ª—É—á–∏—Ç—å!")
        exit(1)
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    exit(1)

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ CREDENTIALS_JSON –∏–∑ Base64
try:
    credentials_base64 = os.getenv("CREDENTIALS_JSON")
    if not credentials_base64:
        raise ValueError("CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω–∞!")

    missing_padding = len(credentials_base64) % 4
    if missing_padding:
        credentials_base64 += "=" * (4 - missing_padding)

    credentials_json = base64.b64decode(credentials_base64).decode("utf-8")
    CREDENTIALS_JSON = json.loads(credentials_json)
    logging.info("‚úÖ CREDENTIALS_JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CREDENTIALS_JSON: {e}")
    raise

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
try:
    bot = Bot(token=TELEGRAM_TOKEN)
    logging.info("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
    raise

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets API
def authorize_google_sheets():
    try:
        creds = Credentials.from_service_account_info(
            CREDENTIALS_JSON,
            scopes=["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        )
        client = gspread.authorize(creds)
        logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets!")
        return client
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async def get_sheet_data(sheet_gid):
    try:
        client = authorize_google_sheets()
        sheet = client.open_by_key(SHEET_ID).get_worksheet_by_id(sheet_gid)
        data = sheet.get_all_records()
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π —Å –≤–∫–ª–∞–¥–∫–∏ {sheet_gid}")
        return data
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∫–ª–∞–¥–∫–∏ {sheet_gid}: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except error.TelegramError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≥–æ–¥–æ–≤—â–∏–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
async def check_birthdays_and_anniversaries():
    today = datetime.date.today()
    data = await get_sheet_data(SHEET_UCHET_GID)
    
    birthdays_today = []
    anniversaries_today = []
    
    for record in data:
        name = record.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        birth_date_raw = record.get("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "").strip()
        hire_date_raw = record.get("–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞", "").strip()
        
        try:
            birth_date = datetime.datetime.strptime(birth_date_raw, "%d.%m.%Y").date() if birth_date_raw else None
            hire_date = datetime.datetime.strptime(hire_date_raw, "%d.%m.%Y").date() if hire_date_raw else None
        except ValueError:
            continue
        
        if birth_date and birth_date.day == today.day and birth_date.month == today.month:
            age = today.year - birth_date.year
            birthdays_today.append(f"{name}, {age} –ª–µ—Ç")
        
        if hire_date:
            months_diff = (today.year - hire_date.year) * 12 + today.month - hire_date.month
            if hire_date.day == today.day and (months_diff == 1 or months_diff % 3 == 0):
                anniversaries_today.append(f"{name}, {months_diff} –º–µ—Å. —Å—Ç–∞–∂–∞")
    
    if birthdays_today:
        await send_telegram_message(f"üéÇ **–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:** üéÇ\n" + "\n".join(birthdays_today))
    if anniversaries_today:
        await send_telegram_message(f"üéâ **–ì–æ–¥–æ–≤—â–∏–Ω—ã —Å—Ç–∞–∂–∞:** üéâ\n" + "\n".join(anniversaries_today))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü (25 —á–∏—Å–ª–∞)
async def check_birthdays_next_month():
    today = datetime.date.today()
    if today.day != 25:
        return
    
    next_month = today.month % 12 + 1
    data = await get_sheet_data(SHEET_AUP_GID)
    birthdays_next_month = []
    
    for record in data:
        name = record.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        birth_date_raw = record.get("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "").strip()
        
        try:
            birth_date = datetime.datetime.strptime(birth_date_raw, "%d.%m.%Y").date() if birth_date_raw else None
        except ValueError:
            continue
        
        if birth_date and birth_date.month == next_month:
            age = today.year - birth_date.year
            birthdays_next_month.append(f"{name}, {birth_date.day}.{next_month}, {age} –ª–µ—Ç")
    
    if birthdays_next_month:
        await send_telegram_message(f"üéÇ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ:** üéÇ\n" + "\n".join(birthdays_next_month))

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def main():
    while True:
        await check_birthdays_and_anniversaries()
        await check_birthdays_next_month()
        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

if __name__ == "__main__":
    asyncio.run(main())
