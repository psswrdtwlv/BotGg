import os
import json
import logging
import asyncio
import datetime
import gspread
import base64
from google.oauth2.service_account import Credentials
from telegram import Bot, error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SHEET_ID = os.getenv("SHEET_ID")
CHAT_ID = os.getenv("CHAT_ID")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ CREDENTIALS_JSON
try:
    credentials_json = os.getenv("CREDENTIALS_JSON")  # –ü–æ–ª—É—á–∞–µ–º JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    if not credentials_json:
        raise ValueError("CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ Python-–æ–±—ä–µ–∫—Ç
    CREDENTIALS_JSON = json.loads(credentials_json)
    logging.info("‚úÖ CREDENTIALS_JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CREDENTIALS_JSON: {e}")
    raise

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
SENT_DATA_FILE = "sent_data.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
try:
    bot = Bot(token=TELEGRAM_TOKEN)
    logging.info("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
    raise

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets API
def authorize_google_sheets():
    try:
        creds = Credentials.from_service_account_info(CREDENTIALS_JSON, scopes=["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"])
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SHEET_ID).sheet1
        logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets!")
        return sheet
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        raise

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
def safe_parse_date(date_value):
    if not date_value or date_value.strip() == "":
        return None
    try:
        parsed_date = datetime.datetime.strptime(date_value.strip(), "%d.%m.%Y").date()
        return parsed_date
    except ValueError:
        return None

# –ß—Ç–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def load_sent_data():
    try:
        with open(SENT_DATA_FILE, "r") as file:
            data = json.load(file)
            if "sent_today" not in data:
                data["sent_today"] = []
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return {"sent_today": []}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_sent_data(sent_data):
    with open(SENT_DATA_FILE, "w") as file:
        json.dump(sent_data, file, indent=4, default=str)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async def get_sheet_data():
    try:
        sheet = authorize_google_sheets()
        return sheet.get_all_records()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        return []

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except error.TelegramError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_and_notify(data, sent_data):
    today = datetime.date.today()
    new_notifications = []
    birthdays = []
    anniversaries = []

    for record in data:
        name = record.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        birth_date_raw = record.get("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "")
        hire_date_raw = record.get("–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞", "")

        birth_date = safe_parse_date(birth_date_raw)
        hire_date = safe_parse_date(hire_date_raw)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
        if birth_date and birth_date.day == today.day and birth_date.month == today.month:
            if name not in sent_data["sent_today"]:
                birthdays.append(f"üéâ {name} ({birth_date.strftime('%d.%m.%Y')})")
                new_notifications.append(name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–æ–≤—â–∏–Ω—ã —Ä–∞–±–æ—Ç—ã
        if hire_date:
            months_worked = (today.year - hire_date.year) * 12 + today.month - hire_date.month
            if months_worked > 0 and (months_worked == 1 or months_worked % 3 == 0):
                if name not in sent_data["sent_today"]:
                    years = months_worked // 12
                    months = months_worked % 12
                    if years > 0:
                        anniversary_text = f"{years} –ª–µ—Ç" if months == 0 else f"{years} –ª–µ—Ç {months} –º–µ—Å—è—Ü–µ–≤"
                    else:
                        anniversary_text = f"{months} –º–µ—Å—è—Ü–µ–≤"
                    anniversaries.append(f"üéä {name}: {anniversary_text}")
                    new_notifications.append(name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = []
    if birthdays:
        message_parts.append("üéÇ **–°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è** üéÇ\n" + "\n".join(birthdays))
    if anniversaries:
        message_parts.append("üèÜ **–ì–æ–¥–æ–≤—â–∏–Ω–∞ —Ä–∞–±–æ—Ç—ã** üèÜ\n" + "\n".join(anniversaries))

    if message_parts:
        full_message = "\n\n".join(message_parts)
        await send_telegram_message(full_message)

    sent_data["sent_today"].extend(new_notifications)
    save_sent_data(sent_data)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
async def periodic_check():
    sent_data = load_sent_data()
    while True:
        try:
            logging.info("üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
            data = await get_sheet_data()
            if data:
                await check_and_notify(data, sent_data)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        logging.info("üîπ –û–∂–∏–¥–∞–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        await asyncio.sleep(180)

if __name__ == "__main__":
    asyncio.run(periodic_check())
