import os
import json
import logging
import asyncio
import datetime
import gspread
import base64
import pytz
import redis
from google.oauth2.service_account import Credentials
from telegram import Bot, error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SHEET_ID = os.getenv("SHEET_ID")
CHAT_ID = os.getenv("CHAT_ID")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
try:
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    redis_client.set("test_key", "test_value")
    test_value = redis_client.get("test_key")
    if test_value == "test_value":
        logging.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        logging.error("‚ùå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–ø–æ–ª—É—á–∏—Ç—å!")
        exit(1)
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    exit(1)

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ CREDENTIALS_JSON –∏–∑ Base64
try:
    credentials_base64 = os.getenv("CREDENTIALS_JSON")
    if not credentials_base64:
        raise ValueError("CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω–∞!")

    missing_padding = len(credentials_base64) % 4
    if missing_padding:
        credentials_base64 += "=" * (4 - missing_padding)

    credentials_json = base64.b64decode(credentials_base64).decode("utf-8")
    CREDENTIALS_JSON = json.loads(credentials_json)
    logging.info("‚úÖ CREDENTIALS_JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CREDENTIALS_JSON: {e}")
    raise

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
try:
    bot = Bot(token=TELEGRAM_TOKEN)
    logging.info("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
    raise

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets API
def authorize_google_sheets():
    try:
        creds = Credentials.from_service_account_info(
            CREDENTIALS_JSON,
            scopes=["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        )
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SHEET_ID).sheet1
        logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets!")
        return sheet
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        raise

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Redis
def load_sent_data():
    sent_today = redis_client.get("sent_today")
    return json.loads(sent_today) if sent_today else {"sent_today": []}

def save_sent_data(sent_data):
    redis_client.set("sent_today", json.dumps(sent_data))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async def get_sheet_data():
    try:
        sheet = authorize_google_sheets()
        data = sheet.get_all_records()
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Google Sheets")
        return data
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        return []

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except error.TelegramError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_and_notify(data, sent_data):
    today = datetime.date.today()
    new_notifications = []
    birthdays = []
    anniversaries = []

    for record in data:
        name = record.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        birth_date_raw = record.get("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "").strip()
        hire_date_raw = record.get("–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞", "").strip()

        try:
            birth_date = datetime.datetime.strptime(birth_date_raw, "%d.%m.%Y").date() if birth_date_raw else None
            hire_date = datetime.datetime.strptime(hire_date_raw, "%d.%m.%Y").date() if hire_date_raw else None
        except ValueError:
            logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —É {name}: {birth_date_raw} | {hire_date_raw}")
            continue

        if hire_date:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–æ–≤—â–∏–Ω—ã —Å—Ç–∞–∂–∞ –æ—Ç —á–∏—Å–ª–∞ –¥–æ —á–∏—Å–ª–∞
            months_worked = (today.year - hire_date.year) * 12 + today.month - hire_date.month
            if hire_date.day == today.day and months_worked > 0 and (months_worked == 1 or months_worked % 3 == 0):
                if name not in sent_data["sent_today"]:
                    years = months_worked // 12
                    months = months_worked % 12
                    anniversary_text = f"{years} –ª–µ—Ç {months} –º–µ—Å—è—Ü–µ–≤" if months else f"{years} –ª–µ—Ç"
                    anniversaries.append(f"üéä {name}: {anniversary_text}")
                    new_notifications.append(name)

    message_parts = []
    if birthdays:
        message_parts.append("üéÇ **–°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è** üéÇ\n" + "\n".join(birthdays))
    if anniversaries:
        message_parts.append("üèÜ **–ì–æ–¥–æ–≤—â–∏–Ω–∞ —Ä–∞–±–æ—Ç—ã** üèÜ\n" + "\n".join(anniversaries))

    if message_parts:
        full_message = "\n\n".join(message_parts)
        await send_telegram_message(full_message)

    sent_data["sent_today"].extend(new_notifications)
    save_sent_data(sent_data)

async def main():
    while True:
        sent_data = load_sent_data()
        data = await get_sheet_data()
        await check_and_notify(data, sent_data)

        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        now = datetime.datetime.now()
        next_check = now + datetime.timedelta(days=1)
        next_check = next_check.replace(hour=9, minute=0, second=0, microsecond=0)
        wait_time = (next_check - now).total_seconds()
        logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {wait_time // 3600} —á–∞—Å–æ–≤")
        await asyncio.sleep(wait_time)

if __name__ == "__main__":
    asyncio.run(main())
