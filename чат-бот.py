import os
import json
import logging
import asyncio
import datetime
import gspread
import base64
import pytz
import redis
from google.oauth2.service_account import Credentials
from telegram import Bot, error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SHEET_ID = os.getenv("SHEET_ID")
SHEET_UCHET_GID = int(os.getenv("SHEET_UCHET_GID", 0))  # –ì–ò–î –ª–∏—Å—Ç–∞ "–£—á—ë—Ç"
SHEET_AUP_GID = int(os.getenv("SHEET_AUP_GID", 1393986014))  # –ì–ò–î –ª–∏—Å—Ç–∞ "–£—á—ë—Ç –ê–£–ü"
CHAT_ID = os.getenv("CHAT_ID")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
try:
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    redis_client.set("test_key", "test_value")
    test_value = redis_client.get("test_key")
    if test_value == "test_value":
        logging.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        logging.error("‚ùå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–ø–æ–ª—É—á–∏—Ç—å!")
        exit(1)
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    exit(1)

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ CREDENTIALS_JSON –∏–∑ Base64
try:
    credentials_base64 = os.getenv("CREDENTIALS_JSON")
    if not credentials_base64:
        raise ValueError("CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω–∞!")

    missing_padding = len(credentials_base64) % 4
    if missing_padding:
        credentials_base64 += "=" * (4 - missing_padding)

    credentials_json = base64.b64decode(credentials_base64).decode("utf-8")
    CREDENTIALS_JSON = json.loads(credentials_json)
    logging.info("‚úÖ CREDENTIALS_JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CREDENTIALS_JSON: {e}")
    raise

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
try:
    bot = Bot(token=TELEGRAM_TOKEN)
    logging.info("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
    raise

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets API
def authorize_google_sheets():
    try:
        creds = Credentials.from_service_account_info(
            CREDENTIALS_JSON,
            scopes=["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        )
        client = gspread.authorize(creds)
        logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets!")
        return client
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        raise

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Redis
def load_sent_data():
    sent_today = redis_client.get("sent_today")
    return json.loads(sent_today) if sent_today else {"sent_today": []}

def save_sent_data(sent_data):
    redis_client.set("sent_today", json.dumps(sent_data))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∫–ª–∞–¥–∫–∏ Google Sheets
async def get_sheet_data(sheet_gid):
    try:
        client = authorize_google_sheets()
        sheet = client.open_by_key(SHEET_ID).get_worksheet_by_id(sheet_gid)
        data = sheet.get_all_records()
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π —Å –≤–∫–ª–∞–¥–∫–∏ {sheet_gid}")
        return data
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∫–ª–∞–¥–∫–∏ {sheet_gid}: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è "–≥–æ–¥"
def format_years(years):
    if 11 <= years % 100 <= 14:
        return f"{years} –ª–µ—Ç"
    last_digit = years % 10
    if last_digit == 1:
        return f"{years} –≥–æ–¥"
    if 2 <= last_digit <= 4:
        return f"{years} –≥–æ–¥–∞"
    return f"{years} –ª–µ—Ç"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –î–† –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ (25 —á–∏—Å–ª–∞)
async def check_and_notify_for_next_month():
    today = datetime.date.today()
    logging.info("üîç –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ '–£—á—ë—Ç –ê–£–ü'")

    MONTH_NAMES_NOMINATIVE = {
        1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å", 5: "–º–∞–π", 6: "–∏—é–Ω—å",
        7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç", 9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
    }

    MONTH_NAMES_GENITIVE = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }

    data = await get_sheet_data(SHEET_AUP_GID)
    next_month = today.month % 12 + 1
    next_month_nominative = MONTH_NAMES_NOMINATIVE[next_month]  # "–º–∞—Ä—Ç"
    next_month_genitive = MONTH_NAMES_GENITIVE[next_month]  # "–º–∞—Ä—Ç–∞"

    birthdays_next_month = []

    for record in data:
        name = record.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        birth_date_raw = record.get("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "").strip()
        position = record.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        try:
            birth_date = datetime.datetime.strptime(birth_date_raw, "%d.%m.%Y").date() if birth_date_raw else None
        except ValueError:
            continue

        if birth_date and birth_date.month == next_month:
            age = format_years(today.year - birth_date.year)
            birthdays_next_month.append(f"{name}, {birth_date.day} {next_month_genitive}, {age}, {position}")

    if birthdays_next_month:
        await send_telegram_message(f"üéÇ **–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ {next_month_nominative}** üéÇ\n" + "\n".join(birthdays_next_month))

async def main():
    while True:
        sent_data = load_sent_data()
        data = await get_sheet_data(SHEET_UCHET_GID)
        await check_and_notify_for_next_month()
        await asyncio.sleep(86400)

if __name__ == "__main__":
    asyncio.run(main())
